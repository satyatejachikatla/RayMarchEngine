#pragma once

#include <rayMarchUtils/core.hglsl>
#include <rayMarchUtils/camera.hglsl>
#include <rayMarchUtils/utils.hglsl>

#include <rayMarchUtils/lighting/pointLight.hglsl>
#include <rayMarchUtils/lighting/directionLight.hglsl>

#include <tests/testsSet1/rayMarchTestsList.hglsl>

float GetDist(vec3 p){
	return Test_2(p);
}

vec4 testSet1Main()
{
	vec2 uv = getPixelNormalized();
	float time = getTime();

	Camera3D cam = getDefaultCamera3D();
	RayMarchSettings rayMarchSettings = getDefaultRayMarchSettings();
	PointLight pointLight = getDefaultPointLight(rayMarchSettings);
	DirectionLight directionLight = getDefaultDirectionLight();

	rayMarchSettings.MAX_DIST = 1000.;
	rayMarchSettings.MAX_STEPS = 100;

	// Control speed of time
	time = time * .005;

	// Point Light Source Movement
	pointLight.lightSource = vec3(3.*sin(time),3.,2.*cos(time));

	// Direction Light Source Movement
	directionLight.lightDirection = normalize(-vec3(3.*sin(time),3.,2.*cos(time)));

	// Camera Ray Info
	Camera3DRayData camera3DRayData = getCamera3DRay(cam);
	vec3 rayDirection = camera3DRayData.rayDirection;

	// RayMarch Hitpoint
	RayMarchReturn rayMarchReturn = RayMarch(cam.rayOrigin,rayDirection,rayMarchSettings);

	vec3 col = vec3(0.);

	//Lighting
	float l = 0.;
	if (rayMarchReturn.isHit) {
		// For the scene objects
		l = 0.5 * GetPointLight(rayMarchReturn.hitAt,rayMarchSettings,pointLight);
		l += 0.5 * GetDirectionLight(rayMarchReturn.hitAt,rayMarchSettings,directionLight);

		l += 0.3; // Ambient Light

		l = clamp(l,0.,1.);

		col = vec3(l);
	} else {
		// For the backdrop sky
		float t = 0.5*(rayDirection.y + 1.0);
		col = (1.0-t)*vec3(1.0, 1.0, 1.0) + t*vec3(0.5, 0.7, 1.0);
	}

	return vec4(col,1.0);
}
