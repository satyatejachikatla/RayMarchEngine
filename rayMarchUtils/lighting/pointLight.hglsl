#pragma once

#include <rayMarchUtils/lighting/common.hglsl>

struct PointLight {
	vec3 lightSource;
	float shadowDamp;
};

PointLight getDefaultPointLight(RayMarchSettings rayMarchSettings) {
	PointLight pointLight;
	pointLight.lightSource = vec3(0.,rayMarchSettings.MAX_DIST,0.);
	pointLight.shadowDamp = 0.001;

	return pointLight;
}

float GetPointLight(vec3 p,RayMarchSettings rayMarchSettings,PointLight pointLight){

	vec3 lightPosition = pointLight.lightSource;

	vec3 l = normalize(lightPosition-p);
	vec3 n = GetNormal(p);

	float diffusedLight = clamp(dot(n,l),0.,1.);

	RayMarchReturn rayMarchReturn = RayMarch(p+n*rayMarchSettings.SURF_DIST*1.2,l,rayMarchSettings);
	float d = rayMarchReturn.hitDistance;

	// For Shadow damp the light
	if (d<length(lightPosition-p)) diffusedLight *= pointLight.shadowDamp;

	return diffusedLight;
}