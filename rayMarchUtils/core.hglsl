#pragma once

struct RayMarchSettings {
	int MAX_STEPS;
	float MAX_DIST;
	float SURF_DIST;

	int selectScene;
};

RayMarchSettings getDefaultRayMarchSettings(){
	RayMarchSettings rayMarchSettings;

	rayMarchSettings.MAX_DIST  = 100.;
	rayMarchSettings.MAX_STEPS = 100;
	rayMarchSettings.SURF_DIST = .001;

	// Can be used in GetDist function to distinguish scenes
	rayMarchSettings.selectScene = 0;

	return rayMarchSettings;
}

/* Need to define or else will fail to compile */
float GetDist(vec3 p,int selectScene);

struct RayMarchReturn {
	bool isHit;
	float hitDistance;
	vec3 hitAt;
	float closestApproach;
};

RayMarchReturn RayMarch(vec3 ro,vec3 rd,RayMarchSettings rayMarchSettings){
	RayMarchReturn ret;
	ret.isHit = false;
	ret.hitDistance = rayMarchSettings.MAX_DIST;
	ret.hitAt = vec3(rayMarchSettings.MAX_DIST,rayMarchSettings.MAX_DIST,rayMarchSettings.MAX_DIST);
	ret.closestApproach = rayMarchSettings.MAX_DIST;
	float dO = 0;

	for(int i=0;i<rayMarchSettings.MAX_STEPS;i++){
		vec3 p = ro+rd*dO;
		float dS = GetDist(p,rayMarchSettings.selectScene);
		dO += dS;
		ret.closestApproach = min(ret.closestApproach,dS);
		if(dO >= rayMarchSettings.MAX_DIST) {
			return ret;
		}
		if(dS < rayMarchSettings.SURF_DIST) {
			ret.isHit = true;
			ret.hitDistance = dO;
			ret.hitAt = ro + rd*(dO);
			return ret;
		}
	}

	return ret;
}