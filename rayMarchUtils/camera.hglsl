#pragma once

#include <rayMarchUtils/math/math.hglsl>
#include <rayMarchUtils/utils.hglsl>

struct Camera3D{
	float zoom;
	vec3 lookAt;
	vec3 rayOrigin;
	vec3 upWorld;
};

Camera3D getDefaultCamera3D() {
	Camera3D cam;

	// No zoom
	cam.zoom = 1.;
	
	// Up of the world will always be y, unless any crazy animation
	cam.upWorld = vec3(0.,1.,0.);

	// Camera with mouse and keyboard
	cam.rayOrigin = getInput3DPosition() * 100.;

	vec2 yawPitch = getMouseYawPitch();
	float yaw = convertDegreeToRadian(yawPitch.x);
	float pitch = convertDegreeToRadian(yawPitch.y);

	vec3 direction;
	direction.x = cos(yaw) * cos(pitch);
	direction.y = sin(pitch);
	direction.z = sin(yaw) * cos(pitch);
	direction = normalize(direction);

	cam.lookAt = cam.rayOrigin  + direction;

	return cam;

}

/*
	Returns rayDirection wrt to the screen
	Consider the screen as the viewing window
*/

struct Camera3DRayData{
	vec3 rayDirection;

	vec3 front;
	vec3 right;
	vec3 up;
};

Camera3DRayData getCamera3DRay(Camera3D cam) {

	Camera3DRayData ret;

	float zoom = cam.zoom;
	vec3 ro = cam.rayOrigin;
	vec3 lookat = cam.lookAt;
	vec3 u_world = cam.upWorld;
	vec2 screen = getPixelNormalized();

	vec3 f = normalize(lookat-ro);
	vec3 r = normalize(cross(u_world,f));
	vec3 u = normalize(cross(f,r));

	vec3 c = ro + f*zoom;
	vec3 i = c + screen.x*r + screen.y*u;

	vec3 rd = normalize(i-ro);

	ret.rayDirection = rd;
	ret.front = f;
	ret.right = r;
	ret.up = u;

	return ret;
}